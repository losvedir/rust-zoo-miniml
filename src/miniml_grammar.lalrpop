use std::str::FromStr;
use ast::{Type, Expr, TopLevelCmd};

grammar;

Int: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();
Var: String = <s:r"[a-z_]+"> => s.to_string();

pub Toplevel: Vec<TopLevelCmd> = {
    Def => vec![<>],
    <Def> ";;" => vec![<>],
    Bexpr => vec![TopLevelCmd::Expr(*<>)],
    <Bexpr> ";;" => vec![TopLevelCmd::Expr(*<>)],

    // figure out how to improve this. Right now it re-extends every time we
    // parse a new def or expr. better would be t.push(d), I think, but
    // t is immutable. <mut t: Toplevel> doesn't work, though.
    <d:Def> ";;" <t:Toplevel> => {
        let mut new_t = vec![d];
        new_t.extend(t);
        new_t
    },
    <e:Bexpr> ";;" <t:Toplevel> => {
        let mut new_t = vec![TopLevelCmd::Expr(*e)];
        new_t.extend(t);
        new_t
    }
};

Def: TopLevelCmd = {
    "let" <v:Var> "=" <b:Bexpr> => TopLevelCmd::Def(v, *b)
};

Bexpr: Box<Expr> = {
    Nonapp,
    App,
    Arith,
    Boolean,
    "if" <Bexpr> "then" <Bexpr> "else" <Bexpr> => Box::new(Expr::If(<>)),
    "fun" <Var> "(" <Var> ":" <Ty> ")" ":" <Ty> "is" <Bexpr> => Box::new(Expr::Fn(<>))
};

Bexpr1: Box<Expr> = {
    "(" <Bexpr> ")"
};

App: Box<Expr> = {
    App Nonapp => Box::new(Expr::Apply(<>)),
    Nonapp Nonapp => Box::new(Expr::Apply(<>))
};

Nonapp: Box<Expr> = {
    Var => Box::new(Expr::Var(<>)),
    "true" => Box::new(Expr::Bool(true)),
    "false" => Box::new(Expr::Bool(false)),
    Int => Box::new(Expr::Int(<>)),
    Bexpr1
};

Arith: Box<Expr> = {
    "-" <Int> => Box::new(Expr::Int(<>)),
    <Bexpr1> "+" <Bexpr> => Box::new(Expr::Plus(<>)),
    <Bexpr1> "-" <Bexpr> => Box::new(Expr::Minus(<>)),
    <Bexpr1> "*" <Bexpr> => Box::new(Expr::Times(<>))
};

Boolean: Box<Expr> = {
    <Bexpr1> "=" <Bexpr> => Box::new(Expr::Equal(<>)),
    <Bexpr1> "<" <Bexpr> => Box::new(Expr::Less(<>))
};

Ty: Type = {
    Ty1,
    <t1:Ty1> "->" <t2:Ty1> => Type::Arrow(Box::new(t1), Box::new(t2))
};

Ty1: Type = {
    "int" => Type::Int,
    "bool" => Type::Bool,
    "(" <Ty> ")"
};
