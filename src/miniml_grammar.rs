#![allow(unused_imports)]
#![allow(unused_variables)]
use std::str::FromStr;
use ast::{Type, Expr, TopLevelCmd, Tok};
extern crate lalrpop_util as __lalrpop_util;
use self::__lalrpop_util::ParseError as __ParseError;

mod __parse__Bexpr {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use std::str::FromStr;
    use ast::{Type, Expr, TopLevelCmd, Tok};
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_Bexpr<
        'input,
    >(
        input: &'input str,
    ) -> Result<Box<Expr>, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____Bexpr(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        App(Box<Expr>),
        Arith(Box<Expr>),
        Bexpr(Box<Expr>),
        Bexpr1(Box<Expr>),
        Boolean(Box<Expr>),
        Colon(Tok),
        Def(TopLevelCmd),
        Else(Tok),
        Equal(Tok),
        False(Tok),
        Fun(Tok),
        If(Tok),
        Int(i64),
        Is(Tok),
        Less(Tok),
        Let(Tok),
        Lparen(Tok),
        Minus(Tok),
        Nonapp(Box<Expr>),
        Plus(Tok),
        Rparen(Tok),
        Semicolon2(Tok),
        Tarrow(Tok),
        Tbool(Tok),
        Then(Tok),
        Times(Tok),
        Tint(Tok),
        Toplevel(Vec<TopLevelCmd>),
        True(Tok),
        Ty(Type),
        Ty1(Type),
        Var(String),
        ____Bexpr(Box<Expr>),
        ____Toplevel(Vec<TopLevelCmd>),
        ____Ty(Type),
    }

    // State 0
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //   __Bexpr = (*) Bexpr [EOF]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S3
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state3(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   App = App (*) Nonapp [EOF]
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "(" -> Shift(S19)
    //   "false" -> Shift(S11)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   Bexpr1 -> S17
    //   Int -> S6
    //   Nonapp -> S18
    //   Var -> S8
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym1));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 2
    //   Bexpr = Arith (*) [EOF]
    //
    //   EOF -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 3
    //   __Bexpr = Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(__Bexpr = Bexpr => Call(ActionFn(1));)
    //
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action1(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 4
    //   Arith = Bexpr1 (*) "*" Bexpr [EOF]
    //   Arith = Bexpr1 (*) "+" Bexpr [EOF]
    //   Arith = Bexpr1 (*) "-" Bexpr [EOF]
    //   Boolean = Bexpr1 (*) "<" Bexpr [EOF]
    //   Boolean = Bexpr1 (*) "=" Bexpr [EOF]
    //   Nonapp = Bexpr1 (*) [EOF]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S20)
    //   "+" -> Shift(S21)
    //   "-" -> Shift(S22)
    //   "<" -> Shift(S23)
    //   "=" -> Shift(S24)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state24(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 5
    //   Bexpr = Boolean (*) [EOF]
    //
    //   EOF -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 6
    //   Nonapp = Int (*) [EOF]
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 7
    //   App = Nonapp (*) Nonapp [EOF]
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "(" -> Shift(S19)
    //   "false" -> Shift(S11)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   Bexpr1 -> S17
    //   Int -> S6
    //   Nonapp -> S25
    //   Var -> S8
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym1));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state17(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 8
    //   Nonapp = Var (*) [EOF]
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 9
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [EOF]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S28
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state28(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 10
    //   Arith = "-" (*) Int [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //
    //   r#"[0-9]+"# -> Shift(S43)
    //
    //   Int -> S42
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state42(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 11
    //   Nonapp = "false" (*) [EOF]
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 12
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S45)
    //
    //   Var -> S44
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state44(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 13
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S48
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state48(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 14
    //   Nonapp = "true" (*) [EOF]
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 15
    //   Int = r#"[0-9]+"# (*) [EOF]
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 16
    //   Var = r#"[a-z_]+"# (*) [EOF]
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 17
    //   Nonapp = Bexpr1 (*) [EOF]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 18
    //   App = App Nonapp (*) [EOF]
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 19
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [EOF]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S62
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state62(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 20
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = Bexpr1 "*" (*) Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S63
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state63(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 21
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = Bexpr1 "+" (*) Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S64
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state64(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 22
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = Bexpr1 "-" (*) Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S65
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state65(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 23
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = Bexpr1 "<" (*) Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S66
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state66(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 24
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = Bexpr1 "=" (*) Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S67
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state67(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 25
    //   App = Nonapp Nonapp (*) [EOF]
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 26
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp [")"]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S70)
    //   ")" -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "false" -> Shift(S36)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   Bexpr1 -> S68
    //   Int -> S31
    //   Nonapp -> S69
    //   Var -> S33
    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 27
    //   Bexpr = Arith (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 28
    //   Bexpr1 = "(" Bexpr (*) ")" [EOF]
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S71)
    //
    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state71(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 29
    //   Arith = Bexpr1 (*) "*" Bexpr [")"]
    //   Arith = Bexpr1 (*) "+" Bexpr [")"]
    //   Arith = Bexpr1 (*) "-" Bexpr [")"]
    //   Boolean = Bexpr1 (*) "<" Bexpr [")"]
    //   Boolean = Bexpr1 (*) "=" Bexpr [")"]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) [")"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   ")" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S72)
    //   "+" -> Shift(S73)
    //   "-" -> Shift(S74)
    //   "<" -> Shift(S75)
    //   "=" -> Shift(S76)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state72(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state73(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state74(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state75(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state76(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 30
    //   Bexpr = Boolean (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 31
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) [")"]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   ")" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 32
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp [")"]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S70)
    //   ")" -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "false" -> Shift(S36)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   Bexpr1 -> S68
    //   Int -> S31
    //   Nonapp -> S77
    //   Var -> S33
    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state70(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state68(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state77(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 33
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) [")"]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   ")" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 34
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" [")"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S78
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state78(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 35
    //   Arith = "-" (*) Int [")"]
    //   Int = (*) r#"[0-9]+"# [")"]
    //
    //   r#"[0-9]+"# -> Shift(S80)
    //
    //   Int -> S79
    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state79(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 36
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) [")"]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   ")" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 37
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S45)
    //
    //   Var -> S81
    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state81(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 38
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S82
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state82(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 39
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) [")"]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   ")" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 40
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) [")"]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   ")" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 41
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) [")"]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   ")" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 42
    //   Arith = "-" Int (*) [EOF]
    //
    //   EOF -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 43
    //   Int = r#"[0-9]+"# (*) [EOF]
    //
    //   EOF -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 44
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //
    //   "(" -> Shift(S83)
    //
    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 45
    //   Var = r#"[a-z_]+"# (*) ["("]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 46
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["then"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S86)
    //   "false" -> Shift(S56)
    //   "then" -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   Bexpr1 -> S84
    //   Int -> S51
    //   Nonapp -> S85
    //   Var -> S53
    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state84(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state85(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 47
    //   Bexpr = Arith (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 48
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr [EOF]
    //
    //   "then" -> Shift(S87)
    //
    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 49
    //   Arith = Bexpr1 (*) "*" Bexpr ["then"]
    //   Arith = Bexpr1 (*) "+" Bexpr ["then"]
    //   Arith = Bexpr1 (*) "-" Bexpr ["then"]
    //   Boolean = Bexpr1 (*) "<" Bexpr ["then"]
    //   Boolean = Bexpr1 (*) "=" Bexpr ["then"]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["then"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S88)
    //   "+" -> Shift(S89)
    //   "-" -> Shift(S90)
    //   "<" -> Shift(S91)
    //   "=" -> Shift(S92)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "then" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state88(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state89(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state91(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state92(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 50
    //   Bexpr = Boolean (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 51
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["then"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "then" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 52
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["then"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S86)
    //   "false" -> Shift(S56)
    //   "then" -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   Bexpr1 -> S84
    //   Int -> S51
    //   Nonapp -> S93
    //   Var -> S53
    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state86(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state84(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state93(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 53
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["then"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "then" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 54
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["then"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S94
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state94(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 55
    //   Arith = "-" (*) Int ["then"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //
    //   r#"[0-9]+"# -> Shift(S96)
    //
    //   Int -> S95
    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state95(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 56
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["then"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "then" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 57
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S45)
    //
    //   Var -> S97
    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state97(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 58
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S98
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state98(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 59
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["then"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "then" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 60
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["then"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "then" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 61
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["then"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "then" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 62
    //   Bexpr1 = "(" Bexpr (*) ")" [EOF]
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S99)
    //
    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state99(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 63
    //   Arith = Bexpr1 "*" Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 64
    //   Arith = Bexpr1 "+" Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 65
    //   Arith = Bexpr1 "-" Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 66
    //   Boolean = Bexpr1 "<" Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 67
    //   Boolean = Bexpr1 "=" Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 68
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) [")"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   ")" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 69
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) [")"]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   ")" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 70
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" [")"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S100
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state100(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 71
    //   Bexpr1 = "(" Bexpr ")" (*) [EOF]
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 72
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = Bexpr1 "*" (*) Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S101
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 73
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = Bexpr1 "+" (*) Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S102
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 74
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = Bexpr1 "-" (*) Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S103
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state103(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 75
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = Bexpr1 "<" (*) Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S104
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state104(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 76
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Boolean = Bexpr1 "=" (*) Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S105
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 77
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) [")"]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   ")" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 78
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" [")"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S106)
    //
    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 79
    //   Arith = "-" Int (*) [")"]
    //
    //   ")" -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state79<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 80
    //   Int = r#"[0-9]+"# (*) [")"]
    //
    //   ")" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state80<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 81
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //
    //   "(" -> Shift(S107)
    //
    pub fn __state81<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state107(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 82
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr [")"]
    //
    //   "then" -> Shift(S108)
    //
    pub fn __state82<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state108(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 83
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S110)
    //
    //   Var -> S109
    pub fn __state83<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 84
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["then"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "then" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state84<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 85
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["then"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "then" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state85<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 86
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["then"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S111
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state86<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state111(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 87
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S114
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state87<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state114(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 88
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = Bexpr1 "*" (*) Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S128
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state88<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state128(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 89
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = Bexpr1 "+" (*) Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S129
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state89<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state129(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 90
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = Bexpr1 "-" (*) Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S130
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state90<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state130(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 91
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = Bexpr1 "<" (*) Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S131
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state91<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state131(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 92
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Boolean = Bexpr1 "=" (*) Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S132
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state92<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state132(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 93
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["then"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "then" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state93<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 94
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["then"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S133)
    //
    pub fn __state94<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 95
    //   Arith = "-" Int (*) ["then"]
    //
    //   "then" -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state95<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 96
    //   Int = r#"[0-9]+"# (*) ["then"]
    //
    //   "then" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state96<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 97
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //
    //   "(" -> Shift(S134)
    //
    pub fn __state97<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 98
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr ["then"]
    //
    //   "then" -> Shift(S135)
    //
    pub fn __state98<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state135(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 99
    //   Bexpr1 = "(" Bexpr ")" (*) [EOF]
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state99<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 100
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" [")"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S136)
    //
    pub fn __state100<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state136(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 101
    //   Arith = Bexpr1 "*" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state101<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 102
    //   Arith = Bexpr1 "+" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state102<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 103
    //   Arith = Bexpr1 "-" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state103<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 104
    //   Boolean = Bexpr1 "<" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state104<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 105
    //   Boolean = Bexpr1 "=" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state105<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 106
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) [")"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   ")" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state106<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 107
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S110)
    //
    //   Var -> S137
    pub fn __state107<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 108
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S138
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state108<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state138(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 109
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //
    //   ":" -> Shift(S139)
    //
    pub fn __state109<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state139(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 110
    //   Var = r#"[a-z_]+"# (*) [":"]
    //
    //   ":" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state110<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 111
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["then"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S140)
    //
    pub fn __state111<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 112
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp ["else"]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S143)
    //   "else" -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "false" -> Shift(S122)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   Bexpr1 -> S141
    //   Int -> S117
    //   Nonapp -> S142
    //   Var -> S119
    pub fn __state112<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state141(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state142(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 113
    //   Bexpr = Arith (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state113<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 114
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr [EOF]
    //
    //   "else" -> Shift(S144)
    //
    pub fn __state114<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state144(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 115
    //   Arith = Bexpr1 (*) "*" Bexpr ["else"]
    //   Arith = Bexpr1 (*) "+" Bexpr ["else"]
    //   Arith = Bexpr1 (*) "-" Bexpr ["else"]
    //   Boolean = Bexpr1 (*) "<" Bexpr ["else"]
    //   Boolean = Bexpr1 (*) "=" Bexpr ["else"]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["else"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S145)
    //   "+" -> Shift(S146)
    //   "-" -> Shift(S147)
    //   "<" -> Shift(S148)
    //   "=" -> Shift(S149)
    //   "else" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state115<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state145(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state148(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state149(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 116
    //   Bexpr = Boolean (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state116<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 117
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) ["else"]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "else" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state117<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 118
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp ["else"]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S143)
    //   "else" -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "false" -> Shift(S122)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   Bexpr1 -> S141
    //   Int -> S117
    //   Nonapp -> S150
    //   Var -> S119
    pub fn __state118<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state141(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state150(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 119
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) ["else"]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "else" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state119<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 120
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["else"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S151
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state120<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state151(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 121
    //   Arith = "-" (*) Int ["else"]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //
    //   r#"[0-9]+"# -> Shift(S153)
    //
    //   Int -> S152
    pub fn __state121<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state153(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state152(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 122
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) ["else"]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "else" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state122<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 123
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S45)
    //
    //   Var -> S154
    pub fn __state123<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state154(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 124
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S155
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state124<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state155(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 125
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) ["else"]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "else" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state125<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 126
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) ["else"]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "else" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state126<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 127
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) ["else"]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "else" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state127<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 128
    //   Arith = Bexpr1 "*" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state128<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 129
    //   Arith = Bexpr1 "+" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state129<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 130
    //   Arith = Bexpr1 "-" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state130<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 131
    //   Boolean = Bexpr1 "<" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state131<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 132
    //   Boolean = Bexpr1 "=" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state132<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 133
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["then"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "then" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state133<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 134
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S110)
    //
    //   Var -> S156
    pub fn __state134<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state156(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 135
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S157
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state135<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state157(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 136
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) [")"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   ")" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state136<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 137
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //
    //   ":" -> Shift(S158)
    //
    pub fn __state137<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state158(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 138
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr [")"]
    //
    //   "else" -> Shift(S159)
    //
    pub fn __state138<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state159(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 139
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S160
    //   Ty1 -> S161
    pub fn __state139<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state160(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 140
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["then"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "then" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state140<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 141
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["else"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "else" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state141<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 142
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) ["else"]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "else" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state142<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 143
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["else"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S165
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state143<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state165(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 144
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S166
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state144<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state166(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 145
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = Bexpr1 "*" (*) Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S167
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state145<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state167(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 146
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = Bexpr1 "+" (*) Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S168
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state146<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 147
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = Bexpr1 "-" (*) Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S169
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state147<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state169(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 148
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = Bexpr1 "<" (*) Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S170
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state148<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state170(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 149
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Boolean = Bexpr1 "=" (*) Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S171
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state149<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state171(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 150
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) ["else"]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "else" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state150<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 151
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["else"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S172)
    //
    pub fn __state151<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state172(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 152
    //   Arith = "-" Int (*) ["else"]
    //
    //   "else" -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state152<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 153
    //   Int = r#"[0-9]+"# (*) ["else"]
    //
    //   "else" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state153<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 154
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //
    //   "(" -> Shift(S173)
    //
    pub fn __state154<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state173(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 155
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr ["else"]
    //
    //   "then" -> Shift(S174)
    //
    pub fn __state155<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state174(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 156
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //
    //   ":" -> Shift(S175)
    //
    pub fn __state156<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state175(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 157
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr ["then"]
    //
    //   "else" -> Shift(S176)
    //
    pub fn __state157<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state176(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 158
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr [")"]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S177
    //   Ty1 -> S161
    pub fn __state158<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state177(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 159
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S178
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state159<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state178(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 160
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr [EOF]
    //
    //   ")" -> Shift(S179)
    //
    pub fn __state160<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state179(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 161
    //   Ty = Ty1 (*) [")"]
    //   Ty = Ty1 (*) "->" Ty1 [")"]
    //
    //   ")" -> Reduce(Ty = Ty1 => Call(ActionFn(48));)
    //   "->" -> Shift(S180)
    //
    pub fn __state161<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state180(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 162
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [")"]
    //   Ty1 = "(" (*) Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S181
    //   Ty1 -> S161
    pub fn __state162<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state181(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 163
    //   Ty1 = "bool" (*) [")"]
    //   Ty1 = "bool" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //   "->" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state163<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 164
    //   Ty1 = "int" (*) [")"]
    //   Ty1 = "int" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //   "->" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state164<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 165
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["else"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S182)
    //
    pub fn __state165<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state182(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 166
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state166<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 167
    //   Arith = Bexpr1 "*" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state167<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 168
    //   Arith = Bexpr1 "+" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state168<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 169
    //   Arith = Bexpr1 "-" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state169<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 170
    //   Boolean = Bexpr1 "<" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state170<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 171
    //   Boolean = Bexpr1 "=" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state171<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 172
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["else"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "else" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state172<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 173
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S110)
    //
    //   Var -> S183
    pub fn __state173<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state110(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state183(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 174
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S184
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state174<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state184(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 175
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S185
    //   Ty1 -> S161
    pub fn __state175<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state185(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 176
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S186
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state176<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state186(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 177
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr [")"]
    //
    //   ")" -> Shift(S187)
    //
    pub fn __state177<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state187(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 178
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state178<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 179
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr [EOF]
    //
    //   ":" -> Shift(S188)
    //
    pub fn __state179<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state188(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 180
    //   Ty = Ty1 "->" (*) Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "int" [")"]
    //
    //   "(" -> Shift(S190)
    //   "bool" -> Shift(S191)
    //   "int" -> Shift(S192)
    //
    //   Ty1 -> S189
    pub fn __state180<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state190(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state191(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state192(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state189(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 181
    //   Ty1 = "(" Ty (*) ")" [")"]
    //   Ty1 = "(" Ty (*) ")" ["->"]
    //
    //   ")" -> Shift(S193)
    //
    pub fn __state181<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state193(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 182
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["else"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "else" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state182<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 183
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //
    //   ":" -> Shift(S194)
    //
    pub fn __state183<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state194(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 184
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr ["else"]
    //
    //   "else" -> Shift(S195)
    //
    pub fn __state184<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state195(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 185
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr ["then"]
    //
    //   ")" -> Shift(S196)
    //
    pub fn __state185<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state196(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 186
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state186<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 187
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr [")"]
    //
    //   ":" -> Shift(S197)
    //
    pub fn __state187<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state197(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 188
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr [EOF]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S200)
    //   "bool" -> Shift(S201)
    //   "int" -> Shift(S202)
    //
    //   Ty -> S198
    //   Ty1 -> S199
    pub fn __state188<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state200(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state201(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state198(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state199(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 189
    //   Ty = Ty1 "->" Ty1 (*) [")"]
    //
    //   ")" -> Reduce(Ty = Ty1, "->", Ty1 => Call(ActionFn(49));)
    //
    pub fn __state189<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 190
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [")"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S203
    //   Ty1 -> S161
    pub fn __state190<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state203(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 191
    //   Ty1 = "bool" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state191<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 192
    //   Ty1 = "int" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state192<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 193
    //   Ty1 = "(" Ty ")" (*) [")"]
    //   Ty1 = "(" Ty ")" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //   "->" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state193<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 194
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S204
    //   Ty1 -> S161
    pub fn __state194<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state204(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 195
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S205
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state195<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state205(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 196
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr ["then"]
    //
    //   ":" -> Shift(S206)
    //
    pub fn __state196<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state206(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 197
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr [")"]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S200)
    //   "bool" -> Shift(S201)
    //   "int" -> Shift(S202)
    //
    //   Ty -> S207
    //   Ty1 -> S199
    pub fn __state197<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state200(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state201(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state207(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state199(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 198
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr [EOF]
    //
    //   "is" -> Shift(S208)
    //
    pub fn __state198<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state208(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 199
    //   Ty = Ty1 (*) ["is"]
    //   Ty = Ty1 (*) "->" Ty1 ["is"]
    //
    //   "->" -> Shift(S209)
    //   "is" -> Reduce(Ty = Ty1 => Call(ActionFn(48));)
    //
    pub fn __state199<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state209(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 200
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" ["is"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S210
    //   Ty1 -> S161
    pub fn __state200<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state210(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 201
    //   Ty1 = "bool" (*) ["->"]
    //   Ty1 = "bool" (*) ["is"]
    //
    //   "->" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //   "is" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state201<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 202
    //   Ty1 = "int" (*) ["->"]
    //   Ty1 = "int" (*) ["is"]
    //
    //   "->" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //   "is" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state202<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 203
    //   Ty1 = "(" Ty (*) ")" [")"]
    //
    //   ")" -> Shift(S211)
    //
    pub fn __state203<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state211(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 204
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr ["else"]
    //
    //   ")" -> Shift(S212)
    //
    pub fn __state204<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state212(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 205
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state205<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 206
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr ["then"]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S200)
    //   "bool" -> Shift(S201)
    //   "int" -> Shift(S202)
    //
    //   Ty -> S213
    //   Ty1 -> S199
    pub fn __state206<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state200(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state201(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state213(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state199(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 207
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr [")"]
    //
    //   "is" -> Shift(S214)
    //
    pub fn __state207<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state214(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 208
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) "-" Int [EOF]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S9)
    //   "-" -> Shift(S10)
    //   "false" -> Shift(S11)
    //   "fun" -> Shift(S12)
    //   "if" -> Shift(S13)
    //   "true" -> Shift(S14)
    //   r#"[0-9]+"# -> Shift(S15)
    //   r#"[a-z_]+"# -> Shift(S16)
    //
    //   App -> S1
    //   Arith -> S2
    //   Bexpr -> S215
    //   Bexpr1 -> S4
    //   Boolean -> S5
    //   Int -> S6
    //   Nonapp -> S7
    //   Var -> S8
    pub fn __state208<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state12(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state215(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state4(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state6(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 209
    //   Ty = Ty1 "->" (*) Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S217)
    //   "bool" -> Shift(S218)
    //   "int" -> Shift(S219)
    //
    //   Ty1 -> S216
    pub fn __state209<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state217(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state218(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state219(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state216(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 210
    //   Ty1 = "(" Ty (*) ")" ["->"]
    //   Ty1 = "(" Ty (*) ")" ["is"]
    //
    //   ")" -> Shift(S220)
    //
    pub fn __state210<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state220(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 211
    //   Ty1 = "(" Ty ")" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state211<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 212
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr ["else"]
    //
    //   ":" -> Shift(S221)
    //
    pub fn __state212<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state221(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 213
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr ["then"]
    //
    //   "is" -> Shift(S222)
    //
    pub fn __state213<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state222(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 214
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S34)
    //   "-" -> Shift(S35)
    //   "false" -> Shift(S36)
    //   "fun" -> Shift(S37)
    //   "if" -> Shift(S38)
    //   "true" -> Shift(S39)
    //   r#"[0-9]+"# -> Shift(S40)
    //   r#"[a-z_]+"# -> Shift(S41)
    //
    //   App -> S26
    //   Arith -> S27
    //   Bexpr -> S223
    //   Bexpr1 -> S29
    //   Boolean -> S30
    //   Int -> S31
    //   Nonapp -> S32
    //   Var -> S33
    pub fn __state214<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state34(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state35(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state36(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state37(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state38(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state39(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state40(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state27(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state223(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state29(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state30(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state31(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 215
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) [EOF]
    //
    //   EOF -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state215<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 216
    //   Ty = Ty1 "->" Ty1 (*) ["is"]
    //
    //   "is" -> Reduce(Ty = Ty1, "->", Ty1 => Call(ActionFn(49));)
    //
    pub fn __state216<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 217
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" ["is"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S162)
    //   "bool" -> Shift(S163)
    //   "int" -> Shift(S164)
    //
    //   Ty -> S224
    //   Ty1 -> S161
    pub fn __state217<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state162(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state163(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state164(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state224(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 218
    //   Ty1 = "bool" (*) ["is"]
    //
    //   "is" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state218<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 219
    //   Ty1 = "int" (*) ["is"]
    //
    //   "is" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state219<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 220
    //   Ty1 = "(" Ty ")" (*) ["->"]
    //   Ty1 = "(" Ty ")" (*) ["is"]
    //
    //   "->" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //   "is" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state220<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 221
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr ["else"]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S200)
    //   "bool" -> Shift(S201)
    //   "int" -> Shift(S202)
    //
    //   Ty -> S225
    //   Ty1 -> S199
    pub fn __state221<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state200(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state201(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state225(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state199(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 222
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S54)
    //   "-" -> Shift(S55)
    //   "false" -> Shift(S56)
    //   "fun" -> Shift(S57)
    //   "if" -> Shift(S58)
    //   "true" -> Shift(S59)
    //   r#"[0-9]+"# -> Shift(S60)
    //   r#"[a-z_]+"# -> Shift(S61)
    //
    //   App -> S46
    //   Arith -> S47
    //   Bexpr -> S226
    //   Bexpr1 -> S49
    //   Boolean -> S50
    //   Int -> S51
    //   Nonapp -> S52
    //   Var -> S53
    pub fn __state222<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state54(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state55(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state56(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state57(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state58(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state59(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state60(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state46(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state47(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state226(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state50(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state52(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 223
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state223<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 224
    //   Ty1 = "(" Ty (*) ")" ["is"]
    //
    //   ")" -> Shift(S227)
    //
    pub fn __state224<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state227(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 225
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr ["else"]
    //
    //   "is" -> Shift(S228)
    //
    pub fn __state225<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state228(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 226
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state226<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 227
    //   Ty1 = "(" Ty ")" (*) ["is"]
    //
    //   "is" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state227<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 228
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S120)
    //   "-" -> Shift(S121)
    //   "false" -> Shift(S122)
    //   "fun" -> Shift(S123)
    //   "if" -> Shift(S124)
    //   "true" -> Shift(S125)
    //   r#"[0-9]+"# -> Shift(S126)
    //   r#"[a-z_]+"# -> Shift(S127)
    //
    //   App -> S112
    //   Arith -> S113
    //   Bexpr -> S229
    //   Bexpr1 -> S115
    //   Boolean -> S116
    //   Int -> S117
    //   Nonapp -> S118
    //   Var -> S119
    pub fn __state228<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state120(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state121(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state122(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state123(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state124(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state125(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state126(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state113(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state229(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state115(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state117(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 229
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state229<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__Bexpr::parse_Bexpr;

mod __parse__Toplevel {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use std::str::FromStr;
    use ast::{Type, Expr, TopLevelCmd, Tok};
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_Toplevel<
        'input,
    >(
        input: &'input str,
    ) -> Result<Vec<TopLevelCmd>, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____Toplevel(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        App(Box<Expr>),
        Arith(Box<Expr>),
        Bexpr(Box<Expr>),
        Bexpr1(Box<Expr>),
        Boolean(Box<Expr>),
        Colon(Tok),
        Def(TopLevelCmd),
        Else(Tok),
        Equal(Tok),
        False(Tok),
        Fun(Tok),
        If(Tok),
        Int(i64),
        Is(Tok),
        Less(Tok),
        Let(Tok),
        Lparen(Tok),
        Minus(Tok),
        Nonapp(Box<Expr>),
        Plus(Tok),
        Rparen(Tok),
        Semicolon2(Tok),
        Tarrow(Tok),
        Tbool(Tok),
        Then(Tok),
        Times(Tok),
        Tint(Tok),
        Toplevel(Vec<TopLevelCmd>),
        True(Tok),
        Ty(Type),
        Ty1(Type),
        Var(String),
        ____Bexpr(Box<Expr>),
        ____Toplevel(Vec<TopLevelCmd>),
        ____Ty(Type),
    }

    // State 0
    //   Def = (*) "let" Var "=" Bexpr [EOF]
    //   Def = (*) "let" Var "=" Bexpr [";;"]
    //   Toplevel = (*) Def [EOF]
    //   Toplevel = (*) Def ";;" [EOF]
    //   __Toplevel = (*) Toplevel [EOF]
    //
    //   "let" -> Shift(S3)
    //
    //   Def -> S1
    //   Toplevel -> S2
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (17, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Def(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Toplevel(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   Toplevel = Def (*) [EOF]
    //   Toplevel = Def (*) ";;" [EOF]
    //
    //   EOF -> Reduce(Toplevel = Def => Call(ActionFn(25));)
    //   ";;" -> Shift(S4)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<TopLevelCmd>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (7, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state4(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action25(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Toplevel(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 2
    //   __Toplevel = Toplevel (*) [EOF]
    //
    //   EOF -> Reduce(__Toplevel = Toplevel => Call(ActionFn(0));)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Vec<TopLevelCmd>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action0(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____Toplevel(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 3
    //   Def = "let" (*) Var "=" Bexpr [EOF]
    //   Def = "let" (*) Var "=" Bexpr [";;"]
    //   Var = (*) r#"[a-z_]+"# ["="]
    //
    //   r#"[a-z_]+"# -> Shift(S6)
    //
    //   Var -> S5
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state5(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 4
    //   Toplevel = Def ";;" (*) [EOF]
    //
    //   EOF -> Reduce(Toplevel = Def, ";;" => Call(ActionFn(26));)
    //
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<TopLevelCmd>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action26(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Toplevel(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 5
    //   Def = "let" Var (*) "=" Bexpr [EOF]
    //   Def = "let" Var (*) "=" Bexpr [";;"]
    //
    //   "=" -> Shift(S7)
    //
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state7(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 6
    //   Var = r#"[a-z_]+"# (*) ["="]
    //
    //   "=" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (9, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 7
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Def = "let" Var "=" (*) Bexpr [EOF]
    //   Def = "let" Var "=" (*) Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S10
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state10(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 8
    //   App = App (*) Nonapp [EOF]
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp [";;"]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) [EOF]
    //   Bexpr = App (*) [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "(" -> Shift(S26)
    //   ";;" -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "false" -> Shift(S18)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   Bexpr1 -> S24
    //   Int -> S13
    //   Nonapp -> S25
    //   Var -> S15
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state26(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym1));
            }
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state25(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 9
    //   Bexpr = Arith (*) [EOF]
    //   Bexpr = Arith (*) [";;"]
    //
    //   EOF -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //   ";;" -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 10
    //   Def = "let" Var "=" Bexpr (*) [EOF]
    //   Def = "let" Var "=" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Def = "let", Var, "=", Bexpr => Call(ActionFn(27));)
    //   ";;" -> Reduce(Def = "let", Var, "=", Bexpr => Call(ActionFn(27));)
    //
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __nt = super::__action27(input, __sym0, __sym1, __sym2, __sym3);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Def(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 11
    //   Arith = Bexpr1 (*) "*" Bexpr [EOF]
    //   Arith = Bexpr1 (*) "*" Bexpr [";;"]
    //   Arith = Bexpr1 (*) "+" Bexpr [EOF]
    //   Arith = Bexpr1 (*) "+" Bexpr [";;"]
    //   Arith = Bexpr1 (*) "-" Bexpr [EOF]
    //   Arith = Bexpr1 (*) "-" Bexpr [";;"]
    //   Boolean = Bexpr1 (*) "<" Bexpr [EOF]
    //   Boolean = Bexpr1 (*) "<" Bexpr [";;"]
    //   Boolean = Bexpr1 (*) "=" Bexpr [EOF]
    //   Boolean = Bexpr1 (*) "=" Bexpr [";;"]
    //   Nonapp = Bexpr1 (*) [EOF]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) [";;"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S27)
    //   "+" -> Shift(S28)
    //   "-" -> Shift(S29)
    //   ";;" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "<" -> Shift(S30)
    //   "=" -> Shift(S31)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state27(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state28(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state29(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state30(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state31(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 12
    //   Bexpr = Boolean (*) [EOF]
    //   Bexpr = Boolean (*) [";;"]
    //
    //   EOF -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //   ";;" -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 13
    //   Nonapp = Int (*) [EOF]
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) [";;"]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   ";;" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 14
    //   App = Nonapp (*) Nonapp [EOF]
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp [";;"]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) [EOF]
    //   Bexpr = Nonapp (*) [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "(" -> Shift(S26)
    //   ";;" -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "false" -> Shift(S18)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   Bexpr1 -> S24
    //   Int -> S13
    //   Nonapp -> S32
    //   Var -> S15
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state26(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym1));
            }
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state24(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state32(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 15
    //   Nonapp = Var (*) [EOF]
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) [";;"]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   ";;" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 16
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [EOF]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" [";;"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S35
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state35(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 17
    //   Arith = "-" (*) Int [EOF]
    //   Arith = "-" (*) Int [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //
    //   r#"[0-9]+"# -> Shift(S50)
    //
    //   Int -> S49
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state50(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state49(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 18
    //   Nonapp = "false" (*) [EOF]
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) [";;"]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   ";;" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 19
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S52)
    //
    //   Var -> S51
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state51(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 20
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S55
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state55(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 21
    //   Nonapp = "true" (*) [EOF]
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) [";;"]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   ";;" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 22
    //   Int = r#"[0-9]+"# (*) [EOF]
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) [";;"]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   ";;" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 23
    //   Var = r#"[a-z_]+"# (*) [EOF]
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) [";;"]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   ";;" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 24
    //   Nonapp = Bexpr1 (*) [EOF]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) [";;"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   ";;" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 25
    //   App = App Nonapp (*) [EOF]
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) [";;"]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   ";;" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 26
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [EOF]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" [";;"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S69
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state69(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 27
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = Bexpr1 "*" (*) Bexpr [EOF]
    //   Arith = Bexpr1 "*" (*) Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S70
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state70(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 28
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = Bexpr1 "+" (*) Bexpr [EOF]
    //   Arith = Bexpr1 "+" (*) Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S71
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state28<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state71(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 29
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = Bexpr1 "-" (*) Bexpr [EOF]
    //   Arith = Bexpr1 "-" (*) Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S72
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state29<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state72(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 30
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = Bexpr1 "<" (*) Bexpr [EOF]
    //   Boolean = Bexpr1 "<" (*) Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S73
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state30<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state73(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 31
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Boolean = Bexpr1 "=" (*) Bexpr [EOF]
    //   Boolean = Bexpr1 "=" (*) Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S74
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state31<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state74(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 32
    //   App = Nonapp Nonapp (*) [EOF]
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) [";;"]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   ";;" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state32<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 33
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp [")"]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S77)
    //   ")" -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "false" -> Shift(S43)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   Bexpr1 -> S75
    //   Int -> S38
    //   Nonapp -> S76
    //   Var -> S40
    pub fn __state33<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state76(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 34
    //   Bexpr = Arith (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state34<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 35
    //   Bexpr1 = "(" Bexpr (*) ")" [EOF]
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" [";;"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S78)
    //
    pub fn __state35<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state78(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 36
    //   Arith = Bexpr1 (*) "*" Bexpr [")"]
    //   Arith = Bexpr1 (*) "+" Bexpr [")"]
    //   Arith = Bexpr1 (*) "-" Bexpr [")"]
    //   Boolean = Bexpr1 (*) "<" Bexpr [")"]
    //   Boolean = Bexpr1 (*) "=" Bexpr [")"]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) [")"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   ")" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S79)
    //   "+" -> Shift(S80)
    //   "-" -> Shift(S81)
    //   "<" -> Shift(S82)
    //   "=" -> Shift(S83)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state36<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state79(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state80(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state81(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state82(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state83(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 37
    //   Bexpr = Boolean (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state37<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 38
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) [")"]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   ")" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state38<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 39
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp [")"]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S77)
    //   ")" -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "false" -> Shift(S43)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   Bexpr1 -> S75
    //   Int -> S38
    //   Nonapp -> S84
    //   Var -> S40
    pub fn __state39<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state77(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state75(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state84(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 40
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) [")"]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   ")" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state40<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 41
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" [")"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S85
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state41<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state85(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 42
    //   Arith = "-" (*) Int [")"]
    //   Int = (*) r#"[0-9]+"# [")"]
    //
    //   r#"[0-9]+"# -> Shift(S87)
    //
    //   Int -> S86
    pub fn __state42<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state87(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state86(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 43
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) [")"]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   ")" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state43<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 44
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S52)
    //
    //   Var -> S88
    pub fn __state44<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state88(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 45
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S89
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state45<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state89(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 46
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) [")"]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   ")" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state46<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 47
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) [")"]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   ")" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state47<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 48
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) [")"]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   ")" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state48<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 49
    //   Arith = "-" Int (*) [EOF]
    //   Arith = "-" Int (*) [";;"]
    //
    //   EOF -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //   ";;" -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state49<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 50
    //   Int = r#"[0-9]+"# (*) [EOF]
    //   Int = r#"[0-9]+"# (*) [";;"]
    //
    //   EOF -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   ";;" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state50<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 51
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //
    //   "(" -> Shift(S90)
    //
    pub fn __state51<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state90(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 52
    //   Var = r#"[a-z_]+"# (*) ["("]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state52<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 53
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["then"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S93)
    //   "false" -> Shift(S63)
    //   "then" -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   Bexpr1 -> S91
    //   Int -> S58
    //   Nonapp -> S92
    //   Var -> S60
    pub fn __state53<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state92(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 54
    //   Bexpr = Arith (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state54<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 55
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr [";;"]
    //
    //   "then" -> Shift(S94)
    //
    pub fn __state55<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state94(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 56
    //   Arith = Bexpr1 (*) "*" Bexpr ["then"]
    //   Arith = Bexpr1 (*) "+" Bexpr ["then"]
    //   Arith = Bexpr1 (*) "-" Bexpr ["then"]
    //   Boolean = Bexpr1 (*) "<" Bexpr ["then"]
    //   Boolean = Bexpr1 (*) "=" Bexpr ["then"]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["then"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S95)
    //   "+" -> Shift(S96)
    //   "-" -> Shift(S97)
    //   "<" -> Shift(S98)
    //   "=" -> Shift(S99)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "then" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state56<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state95(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state96(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state97(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state98(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state99(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 57
    //   Bexpr = Boolean (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state57<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 58
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["then"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "then" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state58<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 59
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["then"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S93)
    //   "false" -> Shift(S63)
    //   "then" -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   Bexpr1 -> S91
    //   Int -> S58
    //   Nonapp -> S100
    //   Var -> S60
    pub fn __state59<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state93(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state91(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state100(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 60
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["then"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "then" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state60<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 61
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["then"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S101
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state61<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state101(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 62
    //   Arith = "-" (*) Int ["then"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //
    //   r#"[0-9]+"# -> Shift(S103)
    //
    //   Int -> S102
    pub fn __state62<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state103(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state102(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 63
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["then"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "then" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state63<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 64
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S52)
    //
    //   Var -> S104
    pub fn __state64<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state104(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 65
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S105
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state65<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state105(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 66
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["then"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "then" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state66<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 67
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["then"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "then" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state67<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 68
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["then"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "then" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state68<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 69
    //   Bexpr1 = "(" Bexpr (*) ")" [EOF]
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" [";;"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S106)
    //
    pub fn __state69<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state106(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 70
    //   Arith = Bexpr1 "*" Bexpr (*) [EOF]
    //   Arith = Bexpr1 "*" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //   ";;" -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state70<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 71
    //   Arith = Bexpr1 "+" Bexpr (*) [EOF]
    //   Arith = Bexpr1 "+" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //   ";;" -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state71<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 72
    //   Arith = Bexpr1 "-" Bexpr (*) [EOF]
    //   Arith = Bexpr1 "-" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //   ";;" -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state72<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 73
    //   Boolean = Bexpr1 "<" Bexpr (*) [EOF]
    //   Boolean = Bexpr1 "<" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //   ";;" -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state73<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 74
    //   Boolean = Bexpr1 "=" Bexpr (*) [EOF]
    //   Boolean = Bexpr1 "=" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //   ";;" -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state74<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 75
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) [")"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   ")" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state75<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 76
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) [")"]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   ")" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state76<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 77
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" [")"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S107
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state77<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state107(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 78
    //   Bexpr1 = "(" Bexpr ")" (*) [EOF]
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) [";;"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   ";;" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state78<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 79
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = Bexpr1 "*" (*) Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S108
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state79<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state108(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 80
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = Bexpr1 "+" (*) Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S109
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state80<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state109(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 81
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = Bexpr1 "-" (*) Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S110
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state81<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state110(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 82
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = Bexpr1 "<" (*) Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S111
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state82<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state111(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 83
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Boolean = Bexpr1 "=" (*) Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S112
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state83<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state112(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 84
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) [")"]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   ")" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state84<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 85
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" [")"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S113)
    //
    pub fn __state85<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state113(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 86
    //   Arith = "-" Int (*) [")"]
    //
    //   ")" -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state86<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 87
    //   Int = r#"[0-9]+"# (*) [")"]
    //
    //   ")" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state87<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 88
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //
    //   "(" -> Shift(S114)
    //
    pub fn __state88<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state114(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 89
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr [")"]
    //
    //   "then" -> Shift(S115)
    //
    pub fn __state89<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state115(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 90
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S117)
    //
    //   Var -> S116
    pub fn __state90<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state116(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 91
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["then"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "then" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state91<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 92
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["then"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "then" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state92<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 93
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["then"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S118
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state93<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state118(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 94
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr [EOF]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S121
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state94<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state121(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 95
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = Bexpr1 "*" (*) Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S135
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state95<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state135(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 96
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = Bexpr1 "+" (*) Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S136
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state96<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state136(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 97
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = Bexpr1 "-" (*) Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S137
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state97<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state137(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 98
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = Bexpr1 "<" (*) Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S138
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state98<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state138(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 99
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Boolean = Bexpr1 "=" (*) Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S139
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state99<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state139(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 100
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["then"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "then" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state100<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 101
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["then"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S140)
    //
    pub fn __state101<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state140(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 102
    //   Arith = "-" Int (*) ["then"]
    //
    //   "then" -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state102<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 103
    //   Int = r#"[0-9]+"# (*) ["then"]
    //
    //   "then" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state103<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 104
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //
    //   "(" -> Shift(S141)
    //
    pub fn __state104<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state141(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 105
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr ["then"]
    //
    //   "then" -> Shift(S142)
    //
    pub fn __state105<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state142(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 106
    //   Bexpr1 = "(" Bexpr ")" (*) [EOF]
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) [";;"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   EOF -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   ";;" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state106<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (0, _), _)) |
            Some((_, (7, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 107
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" [")"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S143)
    //
    pub fn __state107<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state143(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 108
    //   Arith = Bexpr1 "*" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state108<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 109
    //   Arith = Bexpr1 "+" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state109<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 110
    //   Arith = Bexpr1 "-" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state110<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 111
    //   Boolean = Bexpr1 "<" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state111<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 112
    //   Boolean = Bexpr1 "=" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state112<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 113
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) [")"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   ")" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state113<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 114
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S117)
    //
    //   Var -> S144
    pub fn __state114<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state144(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 115
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S145
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state115<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state145(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 116
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //
    //   ":" -> Shift(S146)
    //
    pub fn __state116<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state146(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 117
    //   Var = r#"[a-z_]+"# (*) [":"]
    //
    //   ":" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state117<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 118
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["then"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S147)
    //
    pub fn __state118<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state147(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 119
    //   App = App (*) Nonapp ["("]
    //   App = App (*) Nonapp ["else"]
    //   App = App (*) Nonapp ["false"]
    //   App = App (*) Nonapp ["true"]
    //   App = App (*) Nonapp [r#"[0-9]+"#]
    //   App = App (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = App (*) ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S150)
    //   "else" -> Reduce(Bexpr = App => Call(ActionFn(29));)
    //   "false" -> Shift(S129)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   Bexpr1 -> S148
    //   Int -> S124
    //   Nonapp -> S149
    //   Var -> S126
    pub fn __state119<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state150(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action29(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state148(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state149(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 120
    //   Bexpr = Arith (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = Arith => Call(ActionFn(30));)
    //
    pub fn __state120<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action30(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 121
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr [EOF]
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr [";;"]
    //
    //   "else" -> Shift(S151)
    //
    pub fn __state121<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state151(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 122
    //   Arith = Bexpr1 (*) "*" Bexpr ["else"]
    //   Arith = Bexpr1 (*) "+" Bexpr ["else"]
    //   Arith = Bexpr1 (*) "-" Bexpr ["else"]
    //   Boolean = Bexpr1 (*) "<" Bexpr ["else"]
    //   Boolean = Bexpr1 (*) "=" Bexpr ["else"]
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["else"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "*" -> Shift(S152)
    //   "+" -> Shift(S153)
    //   "-" -> Shift(S154)
    //   "<" -> Shift(S155)
    //   "=" -> Shift(S156)
    //   "else" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state122<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (2, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state152(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (3, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state153(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state154(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (8, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state155(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (9, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state156(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 123
    //   Bexpr = Boolean (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = Boolean => Call(ActionFn(31));)
    //
    pub fn __state123<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action31(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 124
    //   Nonapp = Int (*) ["("]
    //   Nonapp = Int (*) ["else"]
    //   Nonapp = Int (*) ["false"]
    //   Nonapp = Int (*) ["true"]
    //   Nonapp = Int (*) [r#"[0-9]+"#]
    //   Nonapp = Int (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "else" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "false" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   "true" -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Int => Call(ActionFn(40));)
    //
    pub fn __state124<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action40(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 125
    //   App = Nonapp (*) Nonapp ["("]
    //   App = Nonapp (*) Nonapp ["else"]
    //   App = Nonapp (*) Nonapp ["false"]
    //   App = Nonapp (*) Nonapp ["true"]
    //   App = Nonapp (*) Nonapp [r#"[0-9]+"#]
    //   App = Nonapp (*) Nonapp [r#"[a-z_]+"#]
    //   Bexpr = Nonapp (*) ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S150)
    //   "else" -> Reduce(Bexpr = Nonapp => Call(ActionFn(28));)
    //   "false" -> Shift(S129)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   Bexpr1 -> S148
    //   Int -> S124
    //   Nonapp -> S157
    //   Var -> S126
    pub fn __state125<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state150(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action28(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state148(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state157(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 126
    //   Nonapp = Var (*) ["("]
    //   Nonapp = Var (*) ["else"]
    //   Nonapp = Var (*) ["false"]
    //   Nonapp = Var (*) ["true"]
    //   Nonapp = Var (*) [r#"[0-9]+"#]
    //   Nonapp = Var (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "else" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "false" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   "true" -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Var => Call(ActionFn(37));)
    //
    pub fn __state126<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action37(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 127
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["*"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["+"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["-"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["<"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["="]
    //   Bexpr1 = "(" (*) Bexpr ")" ["else"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S158
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state127<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state158(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 128
    //   Arith = "-" (*) Int ["else"]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //
    //   r#"[0-9]+"# -> Shift(S160)
    //
    //   Int -> S159
    pub fn __state128<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state160(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state159(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 129
    //   Nonapp = "false" (*) ["("]
    //   Nonapp = "false" (*) ["else"]
    //   Nonapp = "false" (*) ["false"]
    //   Nonapp = "false" (*) ["true"]
    //   Nonapp = "false" (*) [r#"[0-9]+"#]
    //   Nonapp = "false" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "else" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "false" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   "true" -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "false" => Call(ActionFn(39));)
    //
    pub fn __state129<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action39(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 130
    //   Bexpr = "fun" (*) Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //
    //   r#"[a-z_]+"# -> Shift(S52)
    //
    //   Var -> S161
    pub fn __state130<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state52(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state161(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 131
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" (*) Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S162
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state131<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state162(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 132
    //   Nonapp = "true" (*) ["("]
    //   Nonapp = "true" (*) ["else"]
    //   Nonapp = "true" (*) ["false"]
    //   Nonapp = "true" (*) ["true"]
    //   Nonapp = "true" (*) [r#"[0-9]+"#]
    //   Nonapp = "true" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "else" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "false" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   "true" -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = "true" => Call(ActionFn(38));)
    //
    pub fn __state132<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action38(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 133
    //   Int = r#"[0-9]+"# (*) ["("]
    //   Int = r#"[0-9]+"# (*) ["else"]
    //   Int = r#"[0-9]+"# (*) ["false"]
    //   Int = r#"[0-9]+"# (*) ["true"]
    //   Int = r#"[0-9]+"# (*) [r#"[0-9]+"#]
    //   Int = r#"[0-9]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "else" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "false" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   "true" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[0-9]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //   r#"[a-z_]+"# -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state133<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 134
    //   Var = r#"[a-z_]+"# (*) ["("]
    //   Var = r#"[a-z_]+"# (*) ["else"]
    //   Var = r#"[a-z_]+"# (*) ["false"]
    //   Var = r#"[a-z_]+"# (*) ["true"]
    //   Var = r#"[a-z_]+"# (*) [r#"[0-9]+"#]
    //   Var = r#"[a-z_]+"# (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "else" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "false" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   "true" -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[0-9]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //   r#"[a-z_]+"# -> Reduce(Var = r#"[a-z_]+"# => Call(ActionFn(24));)
    //
    pub fn __state134<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action24(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Var(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 135
    //   Arith = Bexpr1 "*" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state135<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 136
    //   Arith = Bexpr1 "+" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state136<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 137
    //   Arith = Bexpr1 "-" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state137<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 138
    //   Boolean = Bexpr1 "<" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state138<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 139
    //   Boolean = Bexpr1 "=" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state139<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 140
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["then"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "then" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state140<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 141
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S117)
    //
    //   Var -> S163
    pub fn __state141<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state163(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 142
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S164
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state142<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state164(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 143
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) [")"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   ")" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state143<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (1, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 144
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //
    //   ":" -> Shift(S165)
    //
    pub fn __state144<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state165(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 145
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr [")"]
    //
    //   "else" -> Shift(S166)
    //
    pub fn __state145<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state166(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 146
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S167
    //   Ty1 -> S168
    pub fn __state146<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state167(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 147
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["then"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "then" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state147<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (18, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 148
    //   Nonapp = Bexpr1 (*) ["("]
    //   Nonapp = Bexpr1 (*) ["else"]
    //   Nonapp = Bexpr1 (*) ["false"]
    //   Nonapp = Bexpr1 (*) ["true"]
    //   Nonapp = Bexpr1 (*) [r#"[0-9]+"#]
    //   Nonapp = Bexpr1 (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "else" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "false" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   "true" -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[0-9]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //   r#"[a-z_]+"# -> Reduce(Nonapp = Bexpr1 => Call(ActionFn(41));)
    //
    pub fn __state148<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action41(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Nonapp(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 149
    //   App = App Nonapp (*) ["("]
    //   App = App Nonapp (*) ["else"]
    //   App = App Nonapp (*) ["false"]
    //   App = App Nonapp (*) ["true"]
    //   App = App Nonapp (*) [r#"[0-9]+"#]
    //   App = App Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "else" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "false" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   "true" -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[0-9]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //   r#"[a-z_]+"# -> Reduce(App = App, Nonapp => Call(ActionFn(35));)
    //
    pub fn __state149<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action35(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 150
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" ["("]
    //   Bexpr1 = "(" (*) Bexpr ")" ["else"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["false"]
    //   Bexpr1 = "(" (*) Bexpr ")" ["true"]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" (*) Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S172
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state150<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state172(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 151
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr [EOF]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S173
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state151<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state173(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 152
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = Bexpr1 "*" (*) Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S174
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state152<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state174(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 153
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = Bexpr1 "+" (*) Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S175
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state153<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state175(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 154
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = Bexpr1 "-" (*) Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S176
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state154<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state176(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 155
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = Bexpr1 "<" (*) Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S177
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state155<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state177(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 156
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Boolean = Bexpr1 "=" (*) Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S178
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state156<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state178(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 157
    //   App = Nonapp Nonapp (*) ["("]
    //   App = Nonapp Nonapp (*) ["else"]
    //   App = Nonapp Nonapp (*) ["false"]
    //   App = Nonapp Nonapp (*) ["true"]
    //   App = Nonapp Nonapp (*) [r#"[0-9]+"#]
    //   App = Nonapp Nonapp (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "else" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "false" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   "true" -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[0-9]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //   r#"[a-z_]+"# -> Reduce(App = Nonapp, Nonapp => Call(ActionFn(36));)
    //
    pub fn __state157<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action36(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::App(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 158
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["*"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["+"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["-"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["<"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["="]
    //   Bexpr1 = "(" Bexpr (*) ")" ["else"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S179)
    //
    pub fn __state158<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state179(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 159
    //   Arith = "-" Int (*) ["else"]
    //
    //   "else" -> Reduce(Arith = "-", Int => Call(ActionFn(42));)
    //
    pub fn __state159<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<i64>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __nt = super::__action42(input, __sym0, __sym1);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 160
    //   Int = r#"[0-9]+"# (*) ["else"]
    //
    //   "else" -> Reduce(Int = r#"[0-9]+"# => Call(ActionFn(3));)
    //
    pub fn __state160<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action3(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Int(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 161
    //   Bexpr = "fun" Var (*) "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //
    //   "(" -> Shift(S180)
    //
    pub fn __state161<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state180(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 162
    //   Bexpr = "if" Bexpr (*) "then" Bexpr "else" Bexpr ["else"]
    //
    //   "then" -> Shift(S181)
    //
    pub fn __state162<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state181(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 163
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //
    //   ":" -> Shift(S182)
    //
    pub fn __state163<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state182(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 164
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr ["then"]
    //
    //   "else" -> Shift(S183)
    //
    pub fn __state164<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state183(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 165
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr [")"]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S184
    //   Ty1 -> S168
    pub fn __state165<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state184(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 166
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S185
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state166<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state185(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 167
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr [";;"]
    //
    //   ")" -> Shift(S186)
    //
    pub fn __state167<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state186(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 168
    //   Ty = Ty1 (*) [")"]
    //   Ty = Ty1 (*) "->" Ty1 [")"]
    //
    //   ")" -> Reduce(Ty = Ty1 => Call(ActionFn(48));)
    //   "->" -> Shift(S187)
    //
    pub fn __state168<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state187(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 169
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [")"]
    //   Ty1 = "(" (*) Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S188
    //   Ty1 -> S168
    pub fn __state169<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state188(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 170
    //   Ty1 = "bool" (*) [")"]
    //   Ty1 = "bool" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //   "->" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state170<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 171
    //   Ty1 = "int" (*) [")"]
    //   Ty1 = "int" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //   "->" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state171<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 172
    //   Bexpr1 = "(" Bexpr (*) ")" ["("]
    //   Bexpr1 = "(" Bexpr (*) ")" ["else"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["false"]
    //   Bexpr1 = "(" Bexpr (*) ")" ["true"]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr (*) ")" [r#"[a-z_]+"#]
    //
    //   ")" -> Shift(S189)
    //
    pub fn __state172<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state189(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 173
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) [EOF]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //   ";;" -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state173<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 174
    //   Arith = Bexpr1 "*" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Arith = Bexpr1, "*", Bexpr => Call(ActionFn(45));)
    //
    pub fn __state174<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action45(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 175
    //   Arith = Bexpr1 "+" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Arith = Bexpr1, "+", Bexpr => Call(ActionFn(43));)
    //
    pub fn __state175<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action43(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 176
    //   Arith = Bexpr1 "-" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Arith = Bexpr1, "-", Bexpr => Call(ActionFn(44));)
    //
    pub fn __state176<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action44(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Arith(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 177
    //   Boolean = Bexpr1 "<" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Boolean = Bexpr1, "<", Bexpr => Call(ActionFn(47));)
    //
    pub fn __state177<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action47(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 178
    //   Boolean = Bexpr1 "=" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Boolean = Bexpr1, "=", Bexpr => Call(ActionFn(46));)
    //
    pub fn __state178<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Box<Expr>>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action46(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Boolean(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 179
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["*"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["+"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["-"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["<"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["="]
    //   Bexpr1 = "(" Bexpr ")" (*) ["else"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "*" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "+" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "-" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "<" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "=" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "else" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state179<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (2, _), _)) |
            Some((_, (3, _), _)) |
            Some((_, (4, _), _)) |
            Some((_, (8, _), _)) |
            Some((_, (9, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 180
    //   Bexpr = "fun" Var "(" (*) Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Var = (*) r#"[a-z_]+"# [":"]
    //
    //   r#"[a-z_]+"# -> Shift(S117)
    //
    //   Var -> S190
    pub fn __state180<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state117(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state190(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 181
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" (*) Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S191
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state181<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym3));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym3 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym3));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym2.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state191(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym3 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym3));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 182
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S192
    //   Ty1 -> S168
    pub fn __state182<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state192(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 183
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S193
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state183<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state193(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 184
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr [")"]
    //
    //   ")" -> Shift(S194)
    //
    pub fn __state184<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state194(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 185
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state185<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 186
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr [";;"]
    //
    //   ":" -> Shift(S195)
    //
    pub fn __state186<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state195(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 187
    //   Ty = Ty1 "->" (*) Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "int" [")"]
    //
    //   "(" -> Shift(S197)
    //   "bool" -> Shift(S198)
    //   "int" -> Shift(S199)
    //
    //   Ty1 -> S196
    pub fn __state187<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state197(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state198(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state199(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state196(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 188
    //   Ty1 = "(" Ty (*) ")" [")"]
    //   Ty1 = "(" Ty (*) ")" ["->"]
    //
    //   ")" -> Shift(S200)
    //
    pub fn __state188<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state200(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 189
    //   Bexpr1 = "(" Bexpr ")" (*) ["("]
    //   Bexpr1 = "(" Bexpr ")" (*) ["else"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["false"]
    //   Bexpr1 = "(" Bexpr ")" (*) ["true"]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[0-9]+"#]
    //   Bexpr1 = "(" Bexpr ")" (*) [r#"[a-z_]+"#]
    //
    //   "(" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "else" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "false" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   "true" -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[0-9]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //   r#"[a-z_]+"# -> Reduce(Bexpr1 = "(", Bexpr, ")" => Call(ActionFn(34));)
    //
    pub fn __state189<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, _), _)) |
            Some((_, (11, _), _)) |
            Some((_, (12, _), _)) |
            Some((_, (19, _), _)) |
            Some((_, (20, _), _)) |
            Some((_, (21, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action34(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 190
    //   Bexpr = "fun" Var "(" Var (*) ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //
    //   ":" -> Shift(S201)
    //
    pub fn __state190<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state201(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 191
    //   Bexpr = "if" Bexpr "then" Bexpr (*) "else" Bexpr ["else"]
    //
    //   "else" -> Shift(S202)
    //
    pub fn __state191<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym4 = &mut Some((__tok0));
                __result = try!(__state202(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 192
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr ["then"]
    //
    //   ")" -> Shift(S203)
    //
    pub fn __state192<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state203(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 193
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state193<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 194
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr [")"]
    //
    //   ":" -> Shift(S204)
    //
    pub fn __state194<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state204(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 195
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr [";;"]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S207)
    //   "bool" -> Shift(S208)
    //   "int" -> Shift(S209)
    //
    //   Ty -> S205
    //   Ty1 -> S206
    pub fn __state195<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state207(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state208(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state209(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state205(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state206(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 196
    //   Ty = Ty1 "->" Ty1 (*) [")"]
    //
    //   ")" -> Reduce(Ty = Ty1, "->", Ty1 => Call(ActionFn(49));)
    //
    pub fn __state196<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 197
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [")"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S210
    //   Ty1 -> S168
    pub fn __state197<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state210(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 198
    //   Ty1 = "bool" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state198<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 199
    //   Ty1 = "int" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state199<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 200
    //   Ty1 = "(" Ty ")" (*) [")"]
    //   Ty1 = "(" Ty ")" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //   "->" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state200<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 201
    //   Bexpr = "fun" Var "(" Var ":" (*) Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S211
    //   Ty1 -> S168
    pub fn __state201<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state211(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 202
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr = "if" Bexpr "then" Bexpr "else" (*) Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S212
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state202<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym5));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym5 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym5));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym4.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state212(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym5 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym5));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 203
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr ["then"]
    //
    //   ":" -> Shift(S213)
    //
    pub fn __state203<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state213(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 204
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr [")"]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S207)
    //   "bool" -> Shift(S208)
    //   "int" -> Shift(S209)
    //
    //   Ty -> S214
    //   Ty1 -> S206
    pub fn __state204<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state207(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state208(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state209(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state214(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state206(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 205
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr [";;"]
    //
    //   "is" -> Shift(S215)
    //
    pub fn __state205<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state215(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 206
    //   Ty = Ty1 (*) ["is"]
    //   Ty = Ty1 (*) "->" Ty1 ["is"]
    //
    //   "->" -> Shift(S216)
    //   "is" -> Reduce(Ty = Ty1 => Call(ActionFn(48));)
    //
    pub fn __state206<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state216(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 207
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" ["is"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S217
    //   Ty1 -> S168
    pub fn __state207<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state217(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 208
    //   Ty1 = "bool" (*) ["->"]
    //   Ty1 = "bool" (*) ["is"]
    //
    //   "->" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //   "is" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state208<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 209
    //   Ty1 = "int" (*) ["->"]
    //   Ty1 = "int" (*) ["is"]
    //
    //   "->" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //   "is" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state209<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 210
    //   Ty1 = "(" Ty (*) ")" [")"]
    //
    //   ")" -> Shift(S218)
    //
    pub fn __state210<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state218(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 211
    //   Bexpr = "fun" Var "(" Var ":" Ty (*) ")" ":" Ty "is" Bexpr ["else"]
    //
    //   ")" -> Shift(S219)
    //
    pub fn __state211<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym6 = &mut Some((__tok0));
                __result = try!(__state219(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 212
    //   Bexpr = "if" Bexpr "then" Bexpr "else" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = "if", Bexpr, "then", Bexpr, "else", Bexpr => Call(ActionFn(32));)
    //
    pub fn __state212<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Box<Expr>>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<Box<Expr>>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __nt = super::__action32(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 213
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr ["then"]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S207)
    //   "bool" -> Shift(S208)
    //   "int" -> Shift(S209)
    //
    //   Ty -> S220
    //   Ty1 -> S206
    pub fn __state213<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state207(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state208(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state209(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state220(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state206(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 214
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr [")"]
    //
    //   "is" -> Shift(S221)
    //
    pub fn __state214<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state221(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 215
    //   App = (*) App Nonapp [EOF]
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [";;"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp [EOF]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [";;"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "*" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "+" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "+" Bexpr [";;"]
    //   Arith = (*) Bexpr1 "-" Bexpr [EOF]
    //   Arith = (*) Bexpr1 "-" Bexpr [";;"]
    //   Arith = (*) "-" Int [EOF]
    //   Arith = (*) "-" Int [";;"]
    //   Bexpr = (*) App [EOF]
    //   Bexpr = (*) App [";;"]
    //   Bexpr = (*) Arith [EOF]
    //   Bexpr = (*) Arith [";;"]
    //   Bexpr = (*) Boolean [EOF]
    //   Bexpr = (*) Boolean [";;"]
    //   Bexpr = (*) Nonapp [EOF]
    //   Bexpr = (*) Nonapp [";;"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [EOF]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [";;"]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr [EOF]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr [";;"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [EOF]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" [EOF]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" [";;"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "<" Bexpr [";;"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [EOF]
    //   Boolean = (*) Bexpr1 "=" Bexpr [";;"]
    //   Int = (*) r#"[0-9]+"# [EOF]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [";;"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 [EOF]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [";;"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int [EOF]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [";;"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var [EOF]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [";;"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" [EOF]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [";;"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" [EOF]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [";;"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# [EOF]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [";;"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S16)
    //   "-" -> Shift(S17)
    //   "false" -> Shift(S18)
    //   "fun" -> Shift(S19)
    //   "if" -> Shift(S20)
    //   "true" -> Shift(S21)
    //   r#"[0-9]+"# -> Shift(S22)
    //   r#"[a-z_]+"# -> Shift(S23)
    //
    //   App -> S8
    //   Arith -> S9
    //   Bexpr -> S222
    //   Bexpr1 -> S11
    //   Boolean -> S12
    //   Int -> S13
    //   Nonapp -> S14
    //   Var -> S15
    pub fn __state215<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state18(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state19(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state20(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state9(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state222(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state11(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state13(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state14(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state15(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 216
    //   Ty = Ty1 "->" (*) Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S224)
    //   "bool" -> Shift(S225)
    //   "int" -> Shift(S226)
    //
    //   Ty1 -> S223
    pub fn __state216<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state224(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state225(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state226(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state223(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 217
    //   Ty1 = "(" Ty (*) ")" ["->"]
    //   Ty1 = "(" Ty (*) ")" ["is"]
    //
    //   ")" -> Shift(S227)
    //
    pub fn __state217<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state227(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 218
    //   Ty1 = "(" Ty ")" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state218<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 219
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" (*) ":" Ty "is" Bexpr ["else"]
    //
    //   ":" -> Shift(S228)
    //
    pub fn __state219<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (6, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym7 = &mut Some((__tok0));
                __result = try!(__state228(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 220
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr ["then"]
    //
    //   "is" -> Shift(S229)
    //
    pub fn __state220<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state229(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 221
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp [")"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp [")"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr [")"]
    //   Arith = (*) Bexpr1 "+" Bexpr [")"]
    //   Arith = (*) Bexpr1 "-" Bexpr [")"]
    //   Arith = (*) "-" Int [")"]
    //   Bexpr = (*) App [")"]
    //   Bexpr = (*) Arith [")"]
    //   Bexpr = (*) Boolean [")"]
    //   Bexpr = (*) Nonapp [")"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr [")"]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr [")"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" [")"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr [")"]
    //   Boolean = (*) Bexpr1 "=" Bexpr [")"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# [")"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 [")"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int [")"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var [")"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" [")"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" [")"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# [")"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S41)
    //   "-" -> Shift(S42)
    //   "false" -> Shift(S43)
    //   "fun" -> Shift(S44)
    //   "if" -> Shift(S45)
    //   "true" -> Shift(S46)
    //   r#"[0-9]+"# -> Shift(S47)
    //   r#"[a-z_]+"# -> Shift(S48)
    //
    //   App -> S33
    //   Arith -> S34
    //   Bexpr -> S230
    //   Bexpr1 -> S36
    //   Boolean -> S37
    //   Int -> S38
    //   Nonapp -> S39
    //   Var -> S40
    pub fn __state221<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state41(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state42(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state43(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state44(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state45(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state46(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state47(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state48(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state33(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state34(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state230(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state36(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state37(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state38(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state39(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state40(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 222
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) [EOF]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) [";;"]
    //
    //   EOF -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //   ";;" -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state222<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None |
            Some((_, (7, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 223
    //   Ty = Ty1 "->" Ty1 (*) ["is"]
    //
    //   "is" -> Reduce(Ty = Ty1, "->", Ty1 => Call(ActionFn(49));)
    //
    pub fn __state223<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 224
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" ["is"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S169)
    //   "bool" -> Shift(S170)
    //   "int" -> Shift(S171)
    //
    //   Ty -> S231
    //   Ty1 -> S168
    pub fn __state224<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state169(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state170(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state171(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state231(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state168(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 225
    //   Ty1 = "bool" (*) ["is"]
    //
    //   "is" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state225<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 226
    //   Ty1 = "int" (*) ["is"]
    //
    //   "is" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state226<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 227
    //   Ty1 = "(" Ty ")" (*) ["->"]
    //   Ty1 = "(" Ty ")" (*) ["is"]
    //
    //   "->" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //   "is" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state227<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (5, _), _)) |
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 228
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" (*) Ty "is" Bexpr ["else"]
    //   Ty = (*) Ty1 ["is"]
    //   Ty = (*) Ty1 "->" Ty1 ["is"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "(" Ty ")" ["is"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "bool" ["is"]
    //   Ty1 = (*) "int" ["->"]
    //   Ty1 = (*) "int" ["is"]
    //
    //   "(" -> Shift(S207)
    //   "bool" -> Shift(S208)
    //   "int" -> Shift(S209)
    //
    //   Ty -> S232
    //   Ty1 -> S206
    pub fn __state228<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state207(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state208(input, __lookbehind, __tokens, __sym8));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym8 = &mut Some((__tok0));
                __result = try!(__state209(input, __lookbehind, __tokens, __sym8));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym7.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state232(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym8 = &mut Some(__nt);
                    __result = try!(__state206(input, __lookbehind, __tokens, __lookahead, __sym8));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 229
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["then"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["then"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["then"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["then"]
    //   Arith = (*) "-" Int ["then"]
    //   Bexpr = (*) App ["then"]
    //   Bexpr = (*) Arith ["then"]
    //   Bexpr = (*) Boolean ["then"]
    //   Bexpr = (*) Nonapp ["then"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["then"]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr ["then"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["then"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["then"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["then"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["then"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["then"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["then"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["then"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["then"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["then"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["then"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S61)
    //   "-" -> Shift(S62)
    //   "false" -> Shift(S63)
    //   "fun" -> Shift(S64)
    //   "if" -> Shift(S65)
    //   "true" -> Shift(S66)
    //   r#"[0-9]+"# -> Shift(S67)
    //   r#"[a-z_]+"# -> Shift(S68)
    //
    //   App -> S53
    //   Arith -> S54
    //   Bexpr -> S233
    //   Bexpr1 -> S56
    //   Boolean -> S57
    //   Int -> S58
    //   Nonapp -> S59
    //   Var -> S60
    pub fn __state229<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state61(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state62(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state63(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state64(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state65(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state66(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state67(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state68(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state53(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state54(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state233(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state56(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state57(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state58(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state59(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state60(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 230
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) [")"]
    //
    //   ")" -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state230<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 231
    //   Ty1 = "(" Ty (*) ")" ["is"]
    //
    //   ")" -> Shift(S234)
    //
    pub fn __state231<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state234(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 232
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty (*) "is" Bexpr ["else"]
    //
    //   "is" -> Shift(S235)
    //
    pub fn __state232<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (16, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym9 = &mut Some((__tok0));
                __result = try!(__state235(input, __lookbehind, __tokens, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 233
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) ["then"]
    //
    //   "then" -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state233<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (18, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 234
    //   Ty1 = "(" Ty ")" (*) ["is"]
    //
    //   "is" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state234<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (16, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 235
    //   App = (*) App Nonapp ["("]
    //   App = (*) App Nonapp ["else"]
    //   App = (*) App Nonapp ["false"]
    //   App = (*) App Nonapp ["true"]
    //   App = (*) App Nonapp [r#"[0-9]+"#]
    //   App = (*) App Nonapp [r#"[a-z_]+"#]
    //   App = (*) Nonapp Nonapp ["("]
    //   App = (*) Nonapp Nonapp ["else"]
    //   App = (*) Nonapp Nonapp ["false"]
    //   App = (*) Nonapp Nonapp ["true"]
    //   App = (*) Nonapp Nonapp [r#"[0-9]+"#]
    //   App = (*) Nonapp Nonapp [r#"[a-z_]+"#]
    //   Arith = (*) Bexpr1 "*" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "+" Bexpr ["else"]
    //   Arith = (*) Bexpr1 "-" Bexpr ["else"]
    //   Arith = (*) "-" Int ["else"]
    //   Bexpr = (*) App ["else"]
    //   Bexpr = (*) Arith ["else"]
    //   Bexpr = (*) Boolean ["else"]
    //   Bexpr = (*) Nonapp ["else"]
    //   Bexpr = (*) "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr ["else"]
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" (*) Bexpr ["else"]
    //   Bexpr = (*) "if" Bexpr "then" Bexpr "else" Bexpr ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["("]
    //   Bexpr1 = (*) "(" Bexpr ")" ["*"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["+"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["-"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["<"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["="]
    //   Bexpr1 = (*) "(" Bexpr ")" ["else"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["false"]
    //   Bexpr1 = (*) "(" Bexpr ")" ["true"]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[0-9]+"#]
    //   Bexpr1 = (*) "(" Bexpr ")" [r#"[a-z_]+"#]
    //   Boolean = (*) Bexpr1 "<" Bexpr ["else"]
    //   Boolean = (*) Bexpr1 "=" Bexpr ["else"]
    //   Int = (*) r#"[0-9]+"# ["("]
    //   Int = (*) r#"[0-9]+"# ["else"]
    //   Int = (*) r#"[0-9]+"# ["false"]
    //   Int = (*) r#"[0-9]+"# ["true"]
    //   Int = (*) r#"[0-9]+"# [r#"[0-9]+"#]
    //   Int = (*) r#"[0-9]+"# [r#"[a-z_]+"#]
    //   Nonapp = (*) Bexpr1 ["("]
    //   Nonapp = (*) Bexpr1 ["else"]
    //   Nonapp = (*) Bexpr1 ["false"]
    //   Nonapp = (*) Bexpr1 ["true"]
    //   Nonapp = (*) Bexpr1 [r#"[0-9]+"#]
    //   Nonapp = (*) Bexpr1 [r#"[a-z_]+"#]
    //   Nonapp = (*) Int ["("]
    //   Nonapp = (*) Int ["else"]
    //   Nonapp = (*) Int ["false"]
    //   Nonapp = (*) Int ["true"]
    //   Nonapp = (*) Int [r#"[0-9]+"#]
    //   Nonapp = (*) Int [r#"[a-z_]+"#]
    //   Nonapp = (*) Var ["("]
    //   Nonapp = (*) Var ["else"]
    //   Nonapp = (*) Var ["false"]
    //   Nonapp = (*) Var ["true"]
    //   Nonapp = (*) Var [r#"[0-9]+"#]
    //   Nonapp = (*) Var [r#"[a-z_]+"#]
    //   Nonapp = (*) "false" ["("]
    //   Nonapp = (*) "false" ["else"]
    //   Nonapp = (*) "false" ["false"]
    //   Nonapp = (*) "false" ["true"]
    //   Nonapp = (*) "false" [r#"[0-9]+"#]
    //   Nonapp = (*) "false" [r#"[a-z_]+"#]
    //   Nonapp = (*) "true" ["("]
    //   Nonapp = (*) "true" ["else"]
    //   Nonapp = (*) "true" ["false"]
    //   Nonapp = (*) "true" ["true"]
    //   Nonapp = (*) "true" [r#"[0-9]+"#]
    //   Nonapp = (*) "true" [r#"[a-z_]+"#]
    //   Var = (*) r#"[a-z_]+"# ["("]
    //   Var = (*) r#"[a-z_]+"# ["else"]
    //   Var = (*) r#"[a-z_]+"# ["false"]
    //   Var = (*) r#"[a-z_]+"# ["true"]
    //   Var = (*) r#"[a-z_]+"# [r#"[0-9]+"#]
    //   Var = (*) r#"[a-z_]+"# [r#"[a-z_]+"#]
    //
    //   "(" -> Shift(S127)
    //   "-" -> Shift(S128)
    //   "false" -> Shift(S129)
    //   "fun" -> Shift(S130)
    //   "if" -> Shift(S131)
    //   "true" -> Shift(S132)
    //   r#"[0-9]+"# -> Shift(S133)
    //   r#"[a-z_]+"# -> Shift(S134)
    //
    //   App -> S119
    //   Arith -> S120
    //   Bexpr -> S236
    //   Bexpr1 -> S122
    //   Boolean -> S123
    //   Int -> S124
    //   Nonapp -> S125
    //   Var -> S126
    pub fn __state235<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state127(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (4, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state128(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (12, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state129(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (13, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state130(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (14, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state131(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (19, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state132(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (20, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state133(input, __lookbehind, __tokens, __sym10));
            }
            Some((_, (21, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym10 = &mut Some((__tok0));
                __result = try!(__state134(input, __lookbehind, __tokens, __sym10));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym9.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::App(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state119(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Arith(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state120(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Bexpr(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state236(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10));
                }
                __Nonterminal::Bexpr1(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state122(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Boolean(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state123(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Int(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state124(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Nonapp(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state125(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                __Nonterminal::Var(__nt) => {
                    let __sym10 = &mut Some(__nt);
                    __result = try!(__state126(input, __lookbehind, __tokens, __lookahead, __sym10));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 236
    //   Bexpr = "fun" Var "(" Var ":" Ty ")" ":" Ty "is" Bexpr (*) ["else"]
    //
    //   "else" -> Reduce(Bexpr = "fun", Var, "(", Var, ":", Ty, ")", ":", Ty, "is", Bexpr => Call(ActionFn(33));)
    //
    pub fn __state236<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<String>,
        __sym2: &mut Option<&'input str>,
        __sym3: &mut Option<String>,
        __sym4: &mut Option<&'input str>,
        __sym5: &mut Option<Type>,
        __sym6: &mut Option<&'input str>,
        __sym7: &mut Option<&'input str>,
        __sym8: &mut Option<Type>,
        __sym9: &mut Option<&'input str>,
        __sym10: &mut Option<Box<Expr>>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (11, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __sym3 = __sym3.take().unwrap();
                let __sym4 = __sym4.take().unwrap();
                let __sym5 = __sym5.take().unwrap();
                let __sym6 = __sym6.take().unwrap();
                let __sym7 = __sym7.take().unwrap();
                let __sym8 = __sym8.take().unwrap();
                let __sym9 = __sym9.take().unwrap();
                let __sym10 = __sym10.take().unwrap();
                let __nt = super::__action33(input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Bexpr(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__Toplevel::parse_Toplevel;

mod __parse__Ty {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports)]

    use std::str::FromStr;
    use ast::{Type, Expr, TopLevelCmd, Tok};
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub fn parse_Ty<
        'input,
    >(
        input: &'input str,
    ) -> Result<Type, __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __tokens = super::__intern_token::__Matcher::new(input);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match try!(__state0(input, None, &mut __tokens, __lookahead)) {
            (_, Some(__lookahead), _) => {
                Err(__ParseError::ExtraToken { token: __lookahead })
            }
            (_, None, __Nonterminal::____Ty(__nt)) => {
                Ok(__nt)
            }
            _ => unreachable!(),
        }
    }

    #[allow(dead_code)]
    pub enum __Nonterminal<> {
        App(Box<Expr>),
        Arith(Box<Expr>),
        Bexpr(Box<Expr>),
        Bexpr1(Box<Expr>),
        Boolean(Box<Expr>),
        Colon(Tok),
        Def(TopLevelCmd),
        Else(Tok),
        Equal(Tok),
        False(Tok),
        Fun(Tok),
        If(Tok),
        Int(i64),
        Is(Tok),
        Less(Tok),
        Let(Tok),
        Lparen(Tok),
        Minus(Tok),
        Nonapp(Box<Expr>),
        Plus(Tok),
        Rparen(Tok),
        Semicolon2(Tok),
        Tarrow(Tok),
        Tbool(Tok),
        Then(Tok),
        Times(Tok),
        Tint(Tok),
        Toplevel(Vec<TopLevelCmd>),
        True(Tok),
        Ty(Type),
        Ty1(Type),
        Var(String),
        ____Bexpr(Box<Expr>),
        ____Toplevel(Vec<TopLevelCmd>),
        ____Ty(Type),
    }

    // State 0
    //   Ty = (*) Ty1 [EOF]
    //   Ty = (*) Ty1 "->" Ty1 [EOF]
    //   Ty1 = (*) "(" Ty ")" [EOF]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = (*) "bool" [EOF]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [EOF]
    //   Ty1 = (*) "int" ["->"]
    //   __Ty = (*) Ty [EOF]
    //
    //   "(" -> Shift(S3)
    //   "bool" -> Shift(S4)
    //   "int" -> Shift(S5)
    //
    //   Ty -> S1
    //   Ty1 -> S2
    pub fn __state0<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state3(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state4(input, __lookbehind, __tokens, __sym0));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym0 = &mut Some((__tok0));
                __result = try!(__state5(input, __lookbehind, __tokens, __sym0));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        loop {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state1(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym0 = &mut Some(__nt);
                    __result = try!(__state2(input, __lookbehind, __tokens, __lookahead, __sym0));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
    }

    // State 1
    //   __Ty = Ty (*) [EOF]
    //
    //   EOF -> Reduce(__Ty = Ty => Call(ActionFn(2));)
    //
    pub fn __state1<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action2(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::____Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 2
    //   Ty = Ty1 (*) [EOF]
    //   Ty = Ty1 (*) "->" Ty1 [EOF]
    //
    //   EOF -> Reduce(Ty = Ty1 => Call(ActionFn(48));)
    //   "->" -> Shift(S6)
    //
    pub fn __state2<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state6(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 3
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [EOF]
    //   Ty1 = "(" (*) Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S9)
    //   "bool" -> Shift(S10)
    //   "int" -> Shift(S11)
    //
    //   Ty -> S7
    //   Ty1 -> S8
    pub fn __state3<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state7(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 4
    //   Ty1 = "bool" (*) [EOF]
    //   Ty1 = "bool" (*) ["->"]
    //
    //   EOF -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //   "->" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state4<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 5
    //   Ty1 = "int" (*) [EOF]
    //   Ty1 = "int" (*) ["->"]
    //
    //   EOF -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //   "->" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state5<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 6
    //   Ty = Ty1 "->" (*) Ty1 [EOF]
    //   Ty1 = (*) "(" Ty ")" [EOF]
    //   Ty1 = (*) "bool" [EOF]
    //   Ty1 = (*) "int" [EOF]
    //
    //   "(" -> Shift(S13)
    //   "bool" -> Shift(S14)
    //   "int" -> Shift(S15)
    //
    //   Ty1 -> S12
    pub fn __state6<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state13(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state14(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state15(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state12(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 7
    //   Ty1 = "(" Ty (*) ")" [EOF]
    //   Ty1 = "(" Ty (*) ")" ["->"]
    //
    //   ")" -> Shift(S16)
    //
    pub fn __state7<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state16(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 8
    //   Ty = Ty1 (*) [")"]
    //   Ty = Ty1 (*) "->" Ty1 [")"]
    //
    //   ")" -> Reduce(Ty = Ty1 => Call(ActionFn(48));)
    //   "->" -> Shift(S17)
    //
    pub fn __state8<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (5, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state17(input, __lookbehind, __tokens, __sym0, __sym1));
            }
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action48(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 9
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [")"]
    //   Ty1 = "(" (*) Ty ")" ["->"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S9)
    //   "bool" -> Shift(S10)
    //   "int" -> Shift(S11)
    //
    //   Ty -> S18
    //   Ty1 -> S8
    pub fn __state9<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state18(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 10
    //   Ty1 = "bool" (*) [")"]
    //   Ty1 = "bool" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //   "->" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state10<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 11
    //   Ty1 = "int" (*) [")"]
    //   Ty1 = "int" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //   "->" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state11<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 12
    //   Ty = Ty1 "->" Ty1 (*) [EOF]
    //
    //   EOF -> Reduce(Ty = Ty1, "->", Ty1 => Call(ActionFn(49));)
    //
    pub fn __state12<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 13
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [EOF]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S9)
    //   "bool" -> Shift(S10)
    //   "int" -> Shift(S11)
    //
    //   Ty -> S19
    //   Ty1 -> S8
    pub fn __state13<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state19(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 14
    //   Ty1 = "bool" (*) [EOF]
    //
    //   EOF -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state14<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 15
    //   Ty1 = "int" (*) [EOF]
    //
    //   EOF -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state15<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 16
    //   Ty1 = "(" Ty ")" (*) [EOF]
    //   Ty1 = "(" Ty ")" (*) ["->"]
    //
    //   EOF -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //   "->" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state16<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 17
    //   Ty = Ty1 "->" (*) Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "int" [")"]
    //
    //   "(" -> Shift(S21)
    //   "bool" -> Shift(S22)
    //   "int" -> Shift(S23)
    //
    //   Ty1 -> S20
    pub fn __state17<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state21(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state22(input, __lookbehind, __tokens, __sym2));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state23(input, __lookbehind, __tokens, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym1.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty1(__nt) => {
                    let __sym2 = &mut Some(__nt);
                    __result = try!(__state20(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1, __sym2));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 18
    //   Ty1 = "(" Ty (*) ")" [")"]
    //   Ty1 = "(" Ty (*) ")" ["->"]
    //
    //   ")" -> Shift(S24)
    //
    pub fn __state18<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state24(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 19
    //   Ty1 = "(" Ty (*) ")" [EOF]
    //
    //   ")" -> Shift(S25)
    //
    pub fn __state19<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state25(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 20
    //   Ty = Ty1 "->" Ty1 (*) [")"]
    //
    //   ")" -> Reduce(Ty = Ty1, "->", Ty1 => Call(ActionFn(49));)
    //
    pub fn __state20<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<Type>,
        __sym1: &mut Option<&'input str>,
        __sym2: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action49(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 21
    //   Ty = (*) Ty1 [")"]
    //   Ty = (*) Ty1 "->" Ty1 [")"]
    //   Ty1 = (*) "(" Ty ")" [")"]
    //   Ty1 = (*) "(" Ty ")" ["->"]
    //   Ty1 = "(" (*) Ty ")" [")"]
    //   Ty1 = (*) "bool" [")"]
    //   Ty1 = (*) "bool" ["->"]
    //   Ty1 = (*) "int" [")"]
    //   Ty1 = (*) "int" ["->"]
    //
    //   "(" -> Shift(S9)
    //   "bool" -> Shift(S10)
    //   "int" -> Shift(S11)
    //
    //   Ty -> S26
    //   Ty1 -> S8
    pub fn __state21<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (0, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state9(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (10, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state10(input, __lookbehind, __tokens, __sym1));
            }
            Some((_, (15, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym1 = &mut Some((__tok0));
                __result = try!(__state11(input, __lookbehind, __tokens, __sym1));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        while __sym0.is_some() {
            let (__lookbehind, __lookahead, __nt) = __result;
            match __nt {
                __Nonterminal::Ty(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state26(input, __lookbehind, __tokens, __lookahead, __sym0, __sym1));
                }
                __Nonterminal::Ty1(__nt) => {
                    let __sym1 = &mut Some(__nt);
                    __result = try!(__state8(input, __lookbehind, __tokens, __lookahead, __sym1));
                }
                _ => {
                    return Ok((__lookbehind, __lookahead, __nt));
                }
            }
        }
        return Ok(__result);
    }

    // State 22
    //   Ty1 = "bool" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "bool" => Call(ActionFn(51));)
    //
    pub fn __state22<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action51(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 23
    //   Ty1 = "int" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "int" => Call(ActionFn(50));)
    //
    pub fn __state23<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __nt = super::__action50(input, __sym0);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 24
    //   Ty1 = "(" Ty ")" (*) [")"]
    //   Ty1 = "(" Ty ")" (*) ["->"]
    //
    //   ")" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //   "->" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state24<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) |
            Some((_, (5, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 25
    //   Ty1 = "(" Ty ")" (*) [EOF]
    //
    //   EOF -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state25<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            None => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }

    // State 26
    //   Ty1 = "(" Ty (*) ")" [")"]
    //
    //   ")" -> Shift(S27)
    //
    pub fn __state26<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __lookahead: Option<(usize, (usize, &'input str), usize)>,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        match __lookahead {
            Some((_, (1, __tok0), __loc)) => {
                let mut __lookbehind = Some(__loc);
                let mut __sym2 = &mut Some((__tok0));
                __result = try!(__state27(input, __lookbehind, __tokens, __sym0, __sym1, __sym2));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
        return Ok(__result);
    }

    // State 27
    //   Ty1 = "(" Ty ")" (*) [")"]
    //
    //   ")" -> Reduce(Ty1 = "(", Ty, ")" => Call(ActionFn(52));)
    //
    pub fn __state27<
        'input,
        __TOKENS: Iterator<Item=Result<(usize, (usize, &'input str), usize),__ParseError<usize,(usize, &'input str),()>>>,
    >(
        input: &'input str,
        __lookbehind: Option<usize>,
        __tokens: &mut __TOKENS,
        __sym0: &mut Option<&'input str>,
        __sym1: &mut Option<Type>,
        __sym2: &mut Option<&'input str>,
    ) -> Result<(Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>), __ParseError<usize,(usize, &'input str),()>>
    {
        let mut __result: (Option<usize>, Option<(usize, (usize, &'input str), usize)>, __Nonterminal<>);
        let __lookahead = match __tokens.next() {
            Some(Ok(v)) => Some(v),
            None => None,
            Some(Err(e)) => return Err(e),
        };
        match __lookahead {
            Some((_, (1, _), _)) => {
                let __sym0 = __sym0.take().unwrap();
                let __sym1 = __sym1.take().unwrap();
                let __sym2 = __sym2.take().unwrap();
                let __nt = super::__action52(input, __sym0, __sym1, __sym2);
                return Ok((__lookbehind, __lookahead, __Nonterminal::Ty1(__nt)));
            }
            _ => {
                return Err(__ParseError::UnrecognizedToken {
                    token: __lookahead,
                    expected: vec![],
                });
            }
        }
    }
}
pub use self::__parse__Ty::parse_Ty;
mod __intern_token {
    extern crate lalrpop_util as __lalrpop_util;
    use self::__lalrpop_util::ParseError as __ParseError;
    pub struct __Matcher<'input> {
        text: &'input str,
        consumed: usize,
    }

    fn __tokenize(text: &str) -> Option<(usize, usize)> {
        let mut __chars = text.char_indices();
        let mut __current_match: Option<(usize, usize)> = None;
        let mut __current_state: usize = 0;
        loop {
            match __current_state {
                0 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '(' => {
                            __current_match = Some((0, __index + 1));
                            __current_state = 1;
                            continue;
                        }
                        ')' => {
                            __current_match = Some((1, __index + 1));
                            __current_state = 2;
                            continue;
                        }
                        '*' => {
                            __current_match = Some((2, __index + 1));
                            __current_state = 3;
                            continue;
                        }
                        '+' => {
                            __current_match = Some((3, __index + 1));
                            __current_state = 4;
                            continue;
                        }
                        '-' => {
                            __current_match = Some((4, __index + 1));
                            __current_state = 5;
                            continue;
                        }
                        '0' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        ':' => {
                            __current_match = Some((6, __index + 1));
                            __current_state = 7;
                            continue;
                        }
                        ';' => {
                            __current_state = 8;
                            continue;
                        }
                        '<' => {
                            __current_match = Some((8, __index + 1));
                            __current_state = 9;
                            continue;
                        }
                        '=' => {
                            __current_match = Some((9, __index + 1));
                            __current_state = 10;
                            continue;
                        }
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 12;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 13;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 14;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 15;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 16;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 17;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                1 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                2 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                3 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                4 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                5 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '>' => {
                            __current_match = Some((5, __index + 1));
                            __current_state = 19;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                6 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '0' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '1' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '2' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '3' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '4' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '5' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '6' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '7' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '8' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        '9' => {
                            __current_match = Some((20, __index + 1));
                            __current_state = 6;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                7 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                8 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        ';' => {
                            __current_match = Some((7, __index + 1));
                            __current_state = 20;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                9 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                10 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                11 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                12 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 21;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                13 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 22;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                14 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 23;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 24;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                15 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((14, __index + 1));
                            __current_state = 25;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 26;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((16, __index + 1));
                            __current_state = 27;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                16 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 28;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                17 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 29;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 30;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                18 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                19 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                20 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        _ => {
                            return __current_match;
                        }
                    }
                }
                21 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 31;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                22 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 32;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                23 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 33;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                24 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((13, __index + 1));
                            __current_state = 34;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                25 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                26 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((15, __index + 1));
                            __current_state = 35;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                27 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                28 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((17, __index + 1));
                            __current_state = 36;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                29 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 37;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                30 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 38;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                31 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((10, __index + 1));
                            __current_state = 39;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                32 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((11, __index + 1));
                            __current_state = 40;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                33 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 41;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                34 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                35 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                36 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                37 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((18, __index + 1));
                            __current_state = 42;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                38 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((19, __index + 1));
                            __current_state = 43;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                39 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                40 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                41 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((12, __index + 1));
                            __current_state = 44;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                42 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                43 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                44 => {
                    let (__index, __ch) = match __chars.next() { Some(p) => p, None => return __current_match };
                    match __ch {
                        '_' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'a' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'b' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'c' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'd' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'e' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'f' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'g' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'h' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'i' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'j' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'k' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'l' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'm' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'n' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'o' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'p' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'q' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'r' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        's' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        't' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'u' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'v' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'w' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'x' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'y' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        'z' => {
                            __current_match = Some((21, __index + 1));
                            __current_state = 11;
                            continue;
                        }
                        _ => {
                            return __current_match;
                        }
                    }
                }
                _ => { panic!("invalid state {}", __current_state); }
            }
        }
    }

    impl<'input> __Matcher<'input> {
        pub fn new(s: &'input str) -> __Matcher<'input> {
            __Matcher { text: s, consumed: 0 }
        }
    }

    impl<'input> Iterator for __Matcher<'input> {
        type Item = Result<(usize, (usize, &'input str), usize), __ParseError<usize,(usize, &'input str),()>>;

        fn next(&mut self) -> Option<Self::Item> {
            let __text = self.text.trim_left();
            let __whitespace = self.text.len() - __text.len();
            let __start_offset = self.consumed + __whitespace;
            if __text.is_empty() {
                self.text = __text;
                self.consumed = __start_offset;
                None
            } else {
                match __tokenize(__text) {
                    Some((__index, __length)) => {
                        let __result = &__text[..__length];
                        let __remaining = &__text[__length..];
                        let __end_offset = __start_offset + __length;
                        self.text = __remaining;
                        self.consumed = __end_offset;
                        Some(Ok((__start_offset, (__index, __result), __end_offset)))
                    }
                    None => {
                        Some(Err(__ParseError::InvalidToken { location: __start_offset }))
                    }
                }
            }
        }
    }
}

pub fn __action0<
    'input,
>(
    input: &'input str,
    __0: Vec<TopLevelCmd>,
) -> Vec<TopLevelCmd>
{
    (__0)
}

pub fn __action1<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
) -> Box<Expr>
{
    (__0)
}

pub fn __action2<
    'input,
>(
    input: &'input str,
    __0: Type,
) -> Type
{
    (__0)
}

pub fn __action3<
    'input,
>(
    input: &'input str,
    s: &'input str,
) -> i64
{
    i64::from_str(s).unwrap()
}

pub fn __action4<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Tint
}

pub fn __action5<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Tbool
}

pub fn __action6<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::True
}

pub fn __action7<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::False
}

pub fn __action8<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Fun
}

pub fn __action9<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Is
}

pub fn __action10<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::If
}

pub fn __action11<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Then
}

pub fn __action12<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Else
}

pub fn __action13<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Let
}

pub fn __action14<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Semicolon2
}

pub fn __action15<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Equal
}

pub fn __action16<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Less
}

pub fn __action17<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Tarrow
}

pub fn __action18<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Colon
}

pub fn __action19<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Lparen
}

pub fn __action20<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Rparen
}

pub fn __action21<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Plus
}

pub fn __action22<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Minus
}

pub fn __action23<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Tok
{
    Tok::Times
}

pub fn __action24<
    'input,
>(
    input: &'input str,
    s: &'input str,
) -> String
{
    s.to_string()
}

pub fn __action25<
    'input,
>(
    input: &'input str,
    __0: TopLevelCmd,
) -> Vec<TopLevelCmd>
{
    vec![__0]
}

pub fn __action26<
    'input,
>(
    input: &'input str,
    __0: TopLevelCmd,
    _: &'input str,
) -> Vec<TopLevelCmd>
{
    vec![__0]
}

pub fn __action27<
    'input,
>(
    input: &'input str,
    _: &'input str,
    v: String,
    _: &'input str,
    b: Box<Expr>,
) -> TopLevelCmd
{
    TopLevelCmd::Def(v, *b)
}

pub fn __action28<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
) -> Box<Expr>
{
    (__0)
}

pub fn __action29<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
) -> Box<Expr>
{
    (__0)
}

pub fn __action30<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
) -> Box<Expr>
{
    (__0)
}

pub fn __action31<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
) -> Box<Expr>
{
    (__0)
}

pub fn __action32<
    'input,
>(
    input: &'input str,
    _: &'input str,
    __0: Box<Expr>,
    _: &'input str,
    __1: Box<Expr>,
    _: &'input str,
    __2: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::If(__0, __1, __2))
}

pub fn __action33<
    'input,
>(
    input: &'input str,
    _: &'input str,
    __0: String,
    _: &'input str,
    __1: String,
    _: &'input str,
    __2: Type,
    _: &'input str,
    _: &'input str,
    __3: Type,
    _: &'input str,
    __4: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Fn(__0, __1, __2, __3, __4))
}

pub fn __action34<
    'input,
>(
    input: &'input str,
    _: &'input str,
    __0: Box<Expr>,
    _: &'input str,
) -> Box<Expr>
{
    (__0)
}

pub fn __action35<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
    __1: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Apply(__0, __1))
}

pub fn __action36<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
    __1: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Apply(__0, __1))
}

pub fn __action37<
    'input,
>(
    input: &'input str,
    __0: String,
) -> Box<Expr>
{
    Box::new(Expr::Var(__0))
}

pub fn __action38<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Box<Expr>
{
    Box::new(Expr::Bool(true))
}

pub fn __action39<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Box<Expr>
{
    Box::new(Expr::Bool(false))
}

pub fn __action40<
    'input,
>(
    input: &'input str,
    __0: i64,
) -> Box<Expr>
{
    Box::new(Expr::Int(__0))
}

pub fn __action41<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
) -> Box<Expr>
{
    (__0)
}

pub fn __action42<
    'input,
>(
    input: &'input str,
    _: &'input str,
    __0: i64,
) -> Box<Expr>
{
    Box::new(Expr::Int(__0))
}

pub fn __action43<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
    _: &'input str,
    __1: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Plus(__0, __1))
}

pub fn __action44<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
    _: &'input str,
    __1: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Minus(__0, __1))
}

pub fn __action45<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
    _: &'input str,
    __1: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Times(__0, __1))
}

pub fn __action46<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
    _: &'input str,
    __1: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Equal(__0, __1))
}

pub fn __action47<
    'input,
>(
    input: &'input str,
    __0: Box<Expr>,
    _: &'input str,
    __1: Box<Expr>,
) -> Box<Expr>
{
    Box::new(Expr::Less(__0, __1))
}

pub fn __action48<
    'input,
>(
    input: &'input str,
    __0: Type,
) -> Type
{
    (__0)
}

pub fn __action49<
    'input,
>(
    input: &'input str,
    t1: Type,
    _: &'input str,
    t2: Type,
) -> Type
{
    Type::Arrow(Box::new(t1), Box::new(t2))
}

pub fn __action50<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Type
{
    Type::Int
}

pub fn __action51<
    'input,
>(
    input: &'input str,
    __0: &'input str,
) -> Type
{
    Type::Bool
}

pub fn __action52<
    'input,
>(
    input: &'input str,
    _: &'input str,
    __0: Type,
    _: &'input str,
) -> Type
{
    (__0)
}

pub trait __ToTriple<'input, > {
    type Error;
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),Self::Error>;
}

impl<'input, > __ToTriple<'input, > for (usize, (usize, &'input str), usize) {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        Ok(value)
    }
}
impl<'input, > __ToTriple<'input, > for Result<(usize, (usize, &'input str), usize),()> {
    type Error = ();
    fn to_triple(value: Self) -> Result<(usize,(usize, &'input str),usize),()> {
        value
    }
}
